import * as geom from 'toxiclibsjs/geom';

export default function sketch(s) {
  let tlarg = 200;
  // let n = 0;
  let len;
  let letras = [];
  let scale = 1;
  let segs = ["t0","tr","am","a"];
  let pos = [0,0,1,1,2,3,3,4,4,5];
  let tramax = [];
  let tramay = [];
  let ix,iy;
  let lfundo = [];
  let teste;
  let numx,numy;
  numx = 9;
  numy = 4;

  s.setup = () => {
    s.createCanvas(tlarg*numx*scale, tlarg*numy*scale);
    s.colorMode(s.HSL,100);
    //s.background(1,100,100);
    ix = s.floor(0 + s.random(2));
    tramax.push([ix,ix+1,ix+2,ix+3,ix+4,ix+5,ix+6]);
    iy = s.floor(1 + s.random(1));
    tramay.push(iy);
    

    // args: 
    //    sketch, 
    //    elemento a ser desenhado (numero)
    //    escala, 
    //    ponto x, 
    //    ponto y,
    //    pad x
    //    pad y
    //    rotação
    //    clip (array: numero de divisoes em tiles, tilex, tiley)
    teste = new TLetter(s,1,scale,ix,iy,0,0,0);
    //teste = new TLetter(s,1,scale,ix,iy,0,0,0);

    s.noStroke();
    s.fill(255,50,50);
    teste.display();
    
    // for(let i = 0; i < segs.length; i++){
    //   letras.push(new TLetter(s,segs[i],scale,ix+pos[i],iy,0,0,0));
    // }
    
    // s.background(255);
  
    // for(let i = 0; i < numx*numy * 1; i++){
    //    let rnum = s.floor(s.random(segs.length));
    //    let prob = 0.1666;
    //    let px,py;
    //    px = i%numx;
    //    py = (s.floor(i/numx))%numy;
    //    if(s.random(1.0) < prob && (tramax.indexOf(px) < 0) && (tramay.indexOf(py) < 0)){
    //    lfundo.push(new TLetter(s,segs[rnum],scale,px,py,0,0,s.floor(s.random(8))/2));
    //    }
    // }

    // s.noStroke();


    // lfundo.forEach(function(i) {
    //   //fill(random(90,120),20,20,random(190,220));
    //   s.fill(4,[25,50,75].choose(),[70,80,90].choose(),[0.25,0.50,75].choose);
    //   i.display()
    // }) 

    // for(let i = 0; i < letras.length; i++){
    
    //   if(i<4){
    //   s.fill(4,77,48);//,random(230,235));
    //   }else{
    //   s.fill(0,0,33);//,random(230,235));
    //   }
    //   letras[i].display();
    // }
  
     
    
    
  };

  //  s.draw = () => {
  //   n += 0.1;
  //   console.log(n);
  //  }
  //   for(let i = 0; i<10; i++){
  //   c = c + rate;
  //   lastx = x;
  //   lasty = y;
  //   x = s.sin(c*fr1)*(width/2) + width/2;
  //   y = s.sin(c*fr2)*(height/2) + height/2;
  //   // s.background(backgroundColor);
  //   if(c>rate){
  //   s.strokeWeight(s.random(0.5,2));
  //   s.stroke(s.color(s.cos(c*fr1/2)*150+100, s.cos(c+0.9)*60+50, s.sin(c*fr2/2)*50+200));
  //   s.line(x,y,lastx,lasty)
  //   }
  // }
  // };
  //    console.log(x);

}





class TLetter {
  constructor(_p,type,scale,x,y,padx,pady,rot,clip) {
    
    this.p = _p; 
    this.xarr = [];
    this.yarr = [];
    this.clipbool = false;

    if(type == 0){
      this.xarr = [42.85714,42.85714,100.0,99.97286,42.85714,42.85714];
      this.yarr = [14.285714,28.571428,28.571428,14.285714,14.285714,14.285714]; 
      this.tiles = 1;     
    }
    if(type == 1){
      this.xarr = [71.4279,71.42765,71.56078,72.04135,72.767334,73.72571,74.90344,76.28749,77.86483,79.62242,81.547226,83.62621,85.84635,88.19461,90.65794,93.22333,95.877716,98.608086,100.000046,157.10718,157.10718,157.10715,157.10718,157.1047,157.12816,157.37643,157.85564,158.5538,159.45905,160.55942,161.84303,163.2979,164.9122,166.6739,168.57114,170.59201,172.72455,174.95685,177.27701,179.67307,180.89827,180.92685,180.95535,180.95535,200.00009,200.00009,180.95462,180.9032,178.94167,175.10573,171.39143,167.81796,164.40439,161.16975,158.13322,155.31387,152.73082,150.4031,148.34988,146.59024,145.14323,144.02805,143.26369,142.86931,142.83342,142.83215,142.83096,142.83096,100.000046,98.53249,95.74276,93.17912,90.89903,88.95993,87.41927,86.33451,85.76305,85.712746,85.712494,71.4279,71.4279];
      this.yarr = [-7.382347E-4,71.43085,72.92867,75.84874,78.666245,81.36807,83.94104,86.37199,88.64775,90.755196,92.68113,94.41242,95.93588,97.23839,98.306755,99.12784,99.68845,99.97548,100.000046,100.000046,52.381695,52.355957,52.329277,52.329277,51.103386,48.70641,46.3859,44.153763,42.021893,40.00221,38.106598,36.346973,34.73523,33.283283,32.00302,30.906357,30.005194,29.31143,28.836966,28.59371,28.572882,28.574091,28.575344,28.570667,28.570667,14.285828,14.285828,14.285828,14.319194,14.708857,15.4688635,16.580124,18.023558,19.780083,21.830606,24.156057,26.737339,29.555374,32.591072,35.825356,39.23914,42.813328,46.528847,50.36661,52.329277,52.355247,52.381695,85.712746,85.713234,85.66344,85.09294,84.00905,82.46917,80.53076,78.25119,75.68793,72.898384,71.43085,-7.382347E-4,-7.382347E-4,-7.382347E-4];
      this.tiles = 2;
    }
    if(type == 2){
      this.xarr = [200.00009,198.51009,195.3603,192.02718,188.53362,184.90237,181.1562,177.31795,173.41043,171.43634,171.43683,169.22678,164.9049,160.72035,156.6947,152.84944,149.20613,145.78635,142.61154,139.70335,137.08327,134.77286,132.79366,131.1672,129.91504,129.05872,128.61978,128.5823,128.52986,128.55415,100.00218,57.145187,55.671734,52.79034,50.0005,47.31657,44.75291,42.323887,40.043865,37.927193,35.988247,34.24138,32.700954,31.381336,30.296879,29.461948,28.890907,28.598116,28.573044,28.597994,28.89057,29.461435,30.296225,31.380571,32.700127,34.24052,35.987373,37.92634,40.043056,42.323147,44.752262,47.31603,50.00009,52.790085,55.671642,57.145187,58.61855,61.49969,64.289246,66.97284,69.53616,71.96486,74.24456,76.36097,77.34575,78.29972,80.04647,81.586845,82.90645,83.99093,84.825905,85.39697,85.68979,85.714874,85.714874,99.99972,99.99972,100.00218,99.964714,99.52577,98.66945,97.41725,95.790726,93.81144,91.50089,88.88068,85.972305,82.79732,79.37726,75.73368,71.88813,67.86213,63.677223,59.35498,57.144707,57.144787,54.934513,50.612236,46.427277,42.40121,38.55556,34.911873,31.491703,28.31659,25.408077,22.787724,20.477062,18.497646,16.871017,15.618722,14.762309,14.323319,14.285832,14.32332,14.76231,15.61873,16.871029,18.49767,20.477098,22.787777,25.408154,28.316685,31.491833,34.91204,38.555767,42.40147,46.4276,50.612614,54.93496,57.145287,100.002266,142.86516,142.81746,142.81746,142.81746,142.86516,142.89023,143.18298,143.75395,144.58879,145.67311,146.99255,148.5328,150.27946,152.21814,154.33456,156.61433,159.04306,161.60638,164.29001,167.07951,169.96059,171.43387,172.90707,175.78793,178.57724,181.26065,183.82378,186.25232,188.53185,190.64807,192.58661,194.33308,195.87314,197.19247,198.27669,199.11142,199.68234,199.97505,200.00012,200.0,214.28572,214.28421,214.31041,214.60515,215.17776,216.0139,217.09926,218.41946,219.96019,221.70703,223.64574,225.7619,228.04115,230.46927,233.03178,235.71439,238.50275,241.38254,242.85512,244.32771,247.20749,249.99583,252.67853,255.241,257.6691,259.9484,262.0646,264.00327,265.75015,267.29086,268.61108,269.69638,270.53256,271.10513,271.39984,271.42603,271.42603,285.71014,285.71518,285.71262,285.674,285.23315,284.37524,283.1218,281.4944,279.51456,277.20383,274.58368,271.67563,268.50125,265.08203,261.4395,257.5952,253.57068,249.38737,245.06693,242.85759,240.17009,234.89674,229.79301,224.9119,220.30637,216.02937,212.13388,208.67285,207.14328,205.42508,201.82571,200.00009,200.00009];
      this.yarr = [25.257223,23.961544,21.618624,19.582134,17.861298,16.465338,15.403479,14.684944,14.318958,14.286319,14.285828,14.323186,14.76191,15.618061,16.87009,18.496464,20.475626,22.78604,25.406168,28.314457,31.489374,34.90937,38.5529,42.398426,46.424408,50.6093,54.93155,57.141834,57.141834,85.65492,85.7142,85.7142,85.68926,85.39673,84.825935,83.991234,82.907,81.587585,80.04735,78.30067,76.361885,74.24538,71.96548,69.53657,66.97301,64.28915,61.499344,58.617977,57.14452,55.670975,52.789417,49.99942,47.315353,44.751587,42.32247,40.042377,37.92567,35.986702,34.239845,32.699455,31.379904,30.295553,29.460764,28.889898,28.597322,28.572372,28.593267,28.837248,29.313095,30.00883,30.912481,32.012093,33.295666,34.75125,35.54623,36.36688,38.130585,40.030415,42.05439,44.190563,46.42697,48.751656,51.15264,52.38044,71.42936,71.42936,52.38044,52.38044,50.41579,46.573845,42.853996,39.275383,35.857155,32.618465,29.578468,26.756302,24.171125,21.84208,19.788322,18.029001,16.583267,15.470264,14.70915,14.319069,14.285808,14.285828,14.323354,14.762396,15.618831,16.87112,18.497725,20.477098,22.787704,25.407999,28.316444,31.49149,34.911602,38.555244,42.400864,46.42693,50.611893,54.934216,57.14454,59.35485,63.677177,67.862144,71.8882,75.7338,79.37741,82.7975,85.972496,88.88086,91.50106,93.81154,95.79076,97.417175,98.66925,99.52543,99.96417,100.001526,100.001526,100.000046,57.14749,57.145077,57.14281,57.14281,55.669388,52.788063,49.99832,47.314507,44.750984,42.32212,40.042267,37.92579,35.98704,34.240387,32.700184,31.380795,30.296581,29.461899,28.891108,28.598568,28.57362,28.598688,28.891441,29.462408,30.297226,31.381546,32.701004,34.24124,35.987907,37.926636,40.04307,42.322857,44.75163,47.31504,49.998722,52.78832,55.669476,57.14281,100.000046,100.000046,57.120663,55.648026,52.768364,49.98036,47.298332,44.736626,42.30957,40.0315,37.91674,35.979637,34.23451,32.695705,31.377546,30.294367,29.4605,28.890285,28.59805,28.573126,28.59805,28.890285,29.4605,30.294367,31.377546,32.695705,34.23451,35.979637,37.91674,40.0315,42.30957,44.736626,47.298332,49.98036,52.768364,55.648026,57.120663,100.000046,100.000046,71.41381,57.120663,54.911243,50.590786,46.407745,42.383656,38.540016,34.898346,31.480164,28.306974,25.400307,22.781666,20.472569,18.494532,16.86907,15.617698,14.76193,14.32328,14.285823,14.343971,15.008922,16.306618,18.208563,20.68627,23.71124,27.254984,31.289005,33.499615,31.189688,26.994635,25.257223,25.257223];
      this.tiles = 3;
    }
    if(type == 3){
      this.xarr = [80.903755,78.94104,75.102745,71.38621,67.81057,64.39488,61.158318,58.11994,55.29888,52.71424,50.385124,48.330658,46.569935,45.122078,44.006187,43.241375,42.846745,42.81084,42.809593,42.80838,42.80838,42.80838,42.80838,57.09322,57.09322,57.093185,57.09322,57.090763,57.11427,57.362762,57.842297,58.540924,59.44673,60.547783,61.83216,63.28792,64.90315,66.66592,68.5643,70.58636,72.72018,74.95382,77.275375,79.67288,80.898834,80.92716,80.95545,80.95545,100.01176,100.01176,80.95545,80.903755,80.903755];
      this.yarr = [14.2372,14.270566,14.660232,15.420241,16.531515,17.974962,19.731497,21.782038,24.107504,26.688808,29.506859,32.54258,35.776886,39.190685,42.7649,46.48044,50.318226,52.280903,52.30685,52.332565,85.663864,85.663864,99.95117,99.95117,52.332577,52.30686,52.280907,52.280907,51.05501,48.658024,46.337498,44.105354,41.973488,39.953804,38.058197,36.298573,34.686832,33.234886,31.954634,30.857975,29.95681,29.26305,28.788591,28.545338,28.524513,28.525723,28.526974,28.522211,28.522211,14.237363,14.237363,14.2372,14.2372];
      this.tiles = 1;
    }    

      const zip = (a, b) => a.map((k, i) => [k, b[i]]);
      
      this.verts = zip(this.xarr,this.yarr);
      this.x = x;
      this.y = y;
      this.scale = scale;
      this.padx = padx;
      this.pady = pady;   
      this.rot = rot;   
      let arrayx = this.xarr;
      this.arrlen = arrayx.length;
      
      this.clip = clip;
      

      //cria poligono com vertices
      this.poly = new geom.Polygon2D();
      for(let v of this.verts){
        this.poly.add(new geom.Vec2D(Number(v[0].toFixed(2)),Number(v[1].toFixed(2))))
      }
      console.log(this.poly.vertices)
      
      this.poly = this.poly.increaseVertexCount(300);

      // logica para lidar com clipping
      if(this.clip){
        // let clipper;
        this.clipbool = true;
        this.clipdiv = this.clip[0]; //numero de divisoes
        this.cliplarg = this.scale*100/this.clipdiv;
        this.tileX = this.clip[1]*this.cliplarg;
        this.tileY = this.clip[2]*this.cliplarg;
        this.showclip = this.clip[3];

        // this.rectclip = new geom.Polygon2D();
        // this.rectclip.add(new geom.Vec2D(this.tileX,this.tileY));
        // this.rectclip.add(new geom.Vec2D(this.tileX+this.cliplarg,this.tileY));
        // this.rectclip.add(new geom.Vec2D(this.tileX+this.cliplarg,this.tileY+this.cliplarg));
        // this.rectclip.add(new geom.Vec2D(this.tileX,this.tileY+this.cliplarg));
        // this.rectclip.add(new geom.Vec2D(0,0));
        // this.rectclip.add(new geom.Vec2D(0,100));
        // this.rectclip.add(new geom.Vec2D(100,100));
        // this.rectclip.add(new geom.Vec2D(100,0));
        
        
        this.rectclip = new geom.Rect(
          // 0,0,200,100
          this.tileX-1,//+this.x,
          this.tileY-1,//+this.y,
          this.cliplarg+2,
          this.cliplarg+2
          );

        
          console.log(this.rectclip.getBottomRight());    
        this.rectclip = (this.rectclip).toPolygon2D();
        
        let rectclip = this.rectclip;
        let poly = this.poly;

        // console.log("x:", this.rectclip.x,"y:", this.rectclip.y);

       // let clipper = new geom.SutherlandHodgemanClipper(rectclip);
        console.log(this.poly.vertices);  
        let clipedPoly = new geom.Polygon2D();

        this.poly.vertices.forEach(function(v){
          if(rectclip.containsPoint(v)){
            console.log(true,v)
            clipedPoly.add(v)
          }else{
            console.log(false,v)
          }


        })
        this.poly = clipedPoly;
        // this.poly = clipper.clipPolygon(poly);
    

      console.log(this.poly.vertices);   
      }

    }

    display() { 
       const { p } = this;
       const poly = this.poly;
       const scale = this.scale;
       const padx = this.padx;
       const pady = this.pady;
       const x = this.x;
       const y = this.y;
       let rectclip = this.rectclip;

       

       p.push();

        p.strokeJoin(p.ROUND);
        
        //  p.translate((100 * this.x + 50.0) * this.scale, (100 * this.y + 50.0) * this.scale);
        //  p.rotate(this.rot * p.HALF_PI);

        p.beginShape();

        //cria shape no processing a partir do Polygon2D do toxiclibs
        (poly.vertices).forEach(function(v){
          let px, py, vx, vy;
          
          //simplificando os vertices
          px = v.x;
          py = v.y;
          vx = px*scale; //+ padx*scale*100/7 + x*scale*100 - (100*x + 50.0)*scale;
          vy = py*scale;// + pady*scale*100/7 + y*scale*100 - (100*y + 50.0)*scale; 
          
          
          p.vertex(vx,vy);
            
          });

          
        p.endShape();
      

      if(this.clipbool){

        p.noFill();
        p.stroke(0);
        p.beginShape();
        this.rectclip.vertices.forEach(function(v){
          p.vertex(v.x, v.y);
        console.log(v.x,v.y)
 
        });
        p.endShape(p.CLOSE);
        p.fill(0);
        p.noStroke;
       }
     
        
       

       p.pop();
  
    }
  //   //translate(this.x*this.scale*100 - 50*this.scale, this.y*this.scale*100 - 50*this.scale); 
  //   p.push();
    
  //   p.strokeJoin(p.ROUND);
  //   p.translate((100 * this.x + 50.0) * this.scale, (100 * this.y + 50.0) * this.scale);
  //   p.rotate(this.rot * p.HALF_PI);
  //   p.beginShape();
  //     for(let i = 0; i < this.arrlen; i++){
  //       let px,py;
  //       px = p.round(this.xarr[i]*100)/100;
  //       py = p.round(this.yarr[i]*100)/100;
  //      p.vertex((px*this.scale + this.padx*this.scale*100/7) + this.x*this.scale*100 - ((100 * this.x + 50.0) * this.scale), (py*this.scale + this.pady*this.scale*100/7) + this.y*this.scale*100 - (100 * this.y + 50.0) * this.scale); 
  //     }
  //   p.endShape();
    
  //   p.pop();
  // }
}





Array.prototype.choose = function () {
  return this[Math.floor((Math.random()*this.length))];
}